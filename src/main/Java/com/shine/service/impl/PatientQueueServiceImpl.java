package com.shine.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.beetl.core.statement.VarAssignExpression;
import org.beetl.sql.core.kit.StringKit;

import com.core.base.service.impl.BaseService;
import com.core.dao.Blade;
import com.core.dao.Db;
import com.core.toolbox.Record;
import com.core.toolbox.support.DateTime;
import com.shine.model.PatientQueue;
import com.shine.service.PatientQueueService;

import oracle.net.nt.NTAdapter;

/**
 * Generated by Blade. 2017-08-03 10:50:24
 */
public class PatientQueueServiceImpl extends BaseService<PatientQueue> implements PatientQueueService {

	Blade blade = Blade.create(PatientQueue.class);
	String oprtime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSSS").format(new Date());

	@Override
	public List<Record> findpatientqueuetypeid(String queue_type_id) {
		return blade.findBy("queue_type_id=" + queue_type_id + "", null);
	}

	@Override
	public boolean updateisdisplay(int queue_type_id, String type, String oprtime) {
		boolean bool = false;
		if ("1".equals(type)) {
			bool = blade.updateBy(" is_display=1,opr_time='" + oprtime + "'", "queue_type_id =" + queue_type_id + "",
					null);
		} else if ("2".equals(type)) {
			bool = blade.updateBy(" is_display=2,opr_time='" + oprtime + "'", "queue_type_id =" + queue_type_id + "",
					null);
		}
		return bool;
	}

	@Override
	public List<Record> listPatient(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_WAIT").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}
	@Override
	public List<Record> listPatient_lock(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_LOCK").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	@Override
	public List<Record> listPatient_agin(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_AGIN").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	@Override
	public List<Record> listPatient_first(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_FIRST").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	@Override
	public List<Record> listPatient_late(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_LATE").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	@Override
	public List<Record> listPatient_pass(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_PASS").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	@Override
	public List<Record> listPatient_already(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_ALREADY").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	// 过号患者
	@Override
	public List<Record> listPatient_passno(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_PASSNO").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	public List<Record> listPatient_nodisplay(String queueTypeId) {
		String qsql = Blade.dao().getScript("PatientQueue.LISTPATIENT_NODISPLAY").getSql();
		return Db.init().selectList(qsql, Record.create().set("queueTypeId", queueTypeId));
	}

	// 查询序号的最大值
	@Override
	public PatientQueue findByQueueNum(String QueueNumber) {
		String qsql = Blade.dao().getScript("PatientQueue.findByQueueNum").getSql();
		return blade.findFirst(qsql, Record.create().set("QueueNumber", QueueNumber));
	}

	public List<Record> ByPagerList(String pager_id, String ids) {
		String qsql = Blade.dao().getScript("PatientQueue.patientFirstByPagerList").getSql();
		return Db.init().selectList(qsql, Record.create().set("pager_id", pager_id).set("ids", ids));
	}

	@Override
	public List<Record> getFirstByQueutTypeID(int queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.getFirstByQueutTypeID").getSql();
		return Db.init().selectList(qsql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public int updateFirstCallStatus(int v1, int v2, int id) {
		String qsql = Blade.dao().getScript("PatientQueue.updateFirstCallStatus").getSql();
		return Db.init().update(qsql, Record.create().set("id", id).set("v1", v1).set("v2", v2));
	}

	@Override
	public List<Record> getLateByQueutTypeID(int queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.getLateByQueutTypeID").getSql();
		return Db.init().selectList(qsql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record getPagerIsLogin(String ids) {
		String qsql = Blade.dao().getScript("PatientQueue.getPagerIsLogin").getSql();
		return Db.init().selectOne(qsql, Record.create().set("ids", ids));
	}

	@Override
	public Record getPagerIsLogin2(int ids) {
		String qsql = Blade.dao().getScript("PatientQueue.getPagerIsLogin2").getSql();
		return Db.init().selectOne(qsql, Record.create().set("id", ids));
	}

	@Override
	public boolean patientFirst(String ids) {
		return blade.updateBy(" state_patient = 5,opr_time='" + oprtime + "'", "  id in (" + ids + ")", null);
		// return blade.update
	}

	@Override
	public boolean patientFirstByPagerList(String pager_id, String ids) {
		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return patientFirst(nids.substring(0, nids.length() - 1));
	}

	@Override
	public List<Record> findCode(String code, String ip) {
		String qsql = Blade.dao().getScript("PatientQueue.findCode").getSql();
		return Db.init().selectList(qsql, Record.create().set("code", code).set("ip", ip));
	}

	@Override
	public List<Record> findCodePager(String code, String ip) {
		String qsql = Blade.dao().getScript("PatientQueue.findCodePager").getSql();
		return Db.init().selectList(qsql, Record.create().set("code", code).set("ip", ip));
	}

	@Override
	public List<Record> findCodeThirdSelectPatient(String code, String ip) {
		String qsql = Blade.dao().getScript("PatientQueue.findCodeThirdSelectPatient").getSql();
		return Db.init().selectList(qsql, Record.create().set("code", code).set("ip", ip));
	}

	@Override
	public List<Record> findCodePagerThirdSelectPatient(String code, String ip) {
		String qsql = Blade.dao().getScript("PatientQueue.findCodePagerThirdSelectPatient").getSql();
		return Db.init().selectList(qsql, Record.create().set("code", code).set("ip", ip));
	}

	@Override
	public int queuetypeisckinorder(String queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.queuetypeisckinorder").getSql();
		return Db.init().selectOne(qsql, Record.create().set("queue_type_id", queue_type_id)).getInt("is_ckin_order");
	}

	@Override
	public int findmaxregisteridbyisdisplay(String queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.findmaxregisteridbyisdisplay").getSql();
		return Db.init().selectOne(qsql, Record.create().set("queue_type_id", queue_type_id)).getInt("register_id");
	}

	@Override
	public int findmaxregisteridbyisdisplayByPager(String queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.findmaxregisteridbyisdisplayByPager").getSql();
		return Db.init().selectOne(qsql, Record.create().set("queue_type_id", queue_type_id)).getInt("register_id");
	}

	@Override
	public int updatedisplaybyscanreorder(String register_id, int id) {
		String opr_time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSSS").format(new Date());
		String qsql = Blade.dao().getScript("PatientQueue.updatedisplaybyscanreorder").getSql();
		return Db.init().update(qsql,
				Record.create().set("register_id", register_id).set("id", id).set("opr_time", opr_time));
	}

	@Override
	public int updatedisplaybyscan(int id) {
		String opr_time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSSS").format(new Date());
		String qsql = Blade.dao().getScript("PatientQueue.updatedisplaybyscan").getSql();
		return Db.init().update(qsql, Record.create().set("id", id).set("opr_time", opr_time));
	}

	@Override
	public int updatedisplaybyscan2(int id) {
		String opr_time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSSS").format(new Date());
		String qsql = Blade.dao().getScript("PatientQueue.updatedisplaybyscan2").getSql();
		return Db.init().update(qsql, Record.create().set("id", id).set("opr_time", opr_time));
	}

	@Override
	public int updateFZbyscan(int id, String opr_time, String queue_type_id) {
		int max = 0;
		int state2 = 2;
		String maxsql = Blade.dao().getScript("PatientQueue.getMaxRegister2").getSql();
		String maxs = Db.init()
				.selectOne(maxsql, Record.create().set("queue_type_id", queue_type_id).set("state2", state2))
				.getStr("maxregister");
		if (maxs == null || maxs.equals(""))
			max = 1;
		else
			max = Integer.parseInt(maxs) + 1;
		String qsql = Blade.dao().getScript("PatientQueue.updateFZbyscan").getSql();
		return Db.init().update(qsql, Record.create().set("id", id).set("opr_time", opr_time)
				.set("state_patient2", state2).set("register_id2", max));
	}

	@Override
	public int findmaxregisteridnow(String queue_type_id) {
		String qsql = Blade.dao().getScript("PatientQueue.findmaxregisteridnow").getSql();
		return Db.init().selectOne(qsql, Record.create().set("queue_type_id", queue_type_id)).getInt("register_id");
	}

	@Override
	public int updatepatientqueuedislpay(String code, String ip) {
		String qsql = Blade.dao().getScript("PatientQueue.updatepatientqueuedislpay").getSql();
		return Db.init().update(qsql, Record.create().set("code", code).set("ip", ip));
	}

	@Override
	public boolean NewlyDiagnosed(String ids) {
		return blade.updateBy(" state_patient = 0,call_count=0,opr_time='" + oprtime + "'", "  id in(" + ids + ")",
				null);
	}

	@Override
	public boolean NewlyDiagnosedByPagerList(String pager_id, String ids) {
		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return NewlyDiagnosed(nids.substring(0, nids.length() - 1));
	}

	@Override
	public boolean passed(String ids) {
		return blade.updateBy(" state_patient = 1,opr_time='" + oprtime + "'", "  id in(" + ids + ")", null);
	}

	@Override
	public boolean passedByPagerList(String pager_id, String ids) {
		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return passed(nids.substring(0, nids.length() - 1));
	}

	@Override
	public boolean visit(String queue_type_id, String ids) {
		int max = 0;
		int state2 = 2;
		String maxsql = Blade.dao().getScript("PatientQueue.getMaxRegister2").getSql();
		String maxs = Db.init()
				.selectOne(maxsql, Record.create().set("queue_type_id", queue_type_id).set("state2", state2))
				.getStr("maxregister");
		if (maxs == null || maxs.equals(""))
			max = 1;
		else
			max = Integer.parseInt(maxs) + 1;

		return blade.updateBy(
				" state_patient = 2,state_patient2=2,register_id2=" + max + ",call_count=0,opr_time='" + oprtime + "'",
				"  id in(" + ids + ")", null);
	}

	@Override
	public boolean visitByPagerList(String pager_id, String ids) {
		int max = 0;
		String maxsql = Blade.dao().getScript("PatientQueue.getmaxregisterbypagerid").getSql();
		String maxs = Db.init().selectOne(maxsql, Record.create().set("id", pager_id).set("state2", 2))
				.getStr("maxregister");
		if (maxs == null || maxs.equals(""))
			max = 1;
		else
			max = Integer.parseInt(maxs) + 1;

		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return blade.updateBy(
				" state_patient = 2,state_patient2=2,register_id2=" + max + ",call_count=0,opr_time='" + oprtime + "'",
				"  id in(" + nids + ")", null);
	}

	@Override
	public boolean GreenChannel(String ids) {
		return blade.updateBy(" state_patient = 52,opr_time='" + oprtime + "'", "  id in(" + ids + ")", null);
	}

	@Override
	public boolean GreenChannelByPagerList(String pager_id, String ids) {
		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return GreenChannel(nids.substring(0, nids.length() - 1));
	}

	@Override
	public boolean delay(int times, String ids) {
		return blade.updateBy(" state_patient = 7,opr_time='" + oprtime + "',time_interval =#{times}",
				"  id in(" + ids + ")", Record.create().set("times", times));
	}

	@Override
	public boolean Hang(String ids) {
		return blade.updateBy(
				"opr_time='" + oprtime + "',state_patient = (CASE state_patient WHEN 50 THEN	0 ELSE 50 END )",
				"id IN (" + ids + ")", null);
	}

	@Override
	public boolean HangByPagerList(String pager_id, String ids) {
		List<Record> list = ByPagerList(pager_id, ids);
		String nids = "";
		for (Record record : list) {
			nids += record.getStr("id") + ",";
		}
		return Hang(nids.substring(0, nids.length() - 1));
	}

	@Override
	public boolean baodaopager(String code, String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.patientBDByPager").getSql();
		if (Db.init().update(sql, Record.create().set("queue_type_id", queue_type_id).set("code", code)) > 0)
			return true;
		else {
			return false;
		}
	}

	@Override
	public boolean baodaopager2(String code, String queue_type_id, Integer r) {
		String sql = Blade.dao().getScript("PatientQueue.patientBDByPager2").getSql();
		if (Db.init().update(sql,
				Record.create().set("queue_type_id", queue_type_id).set("code", code).set("rid", r)) > 0)
			return true;
		else {
			return false;
		}
	}

	@Override
	public boolean baodaopager3(String code, String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.patientBDByPager3").getSql();
		if (Db.init().update(sql, Record.create().set("queue_type_id", queue_type_id).set("code", code)) > 0)
			return true;
		else {
			return false;
		}
	}

	@Override
	public Record getpatientbypagerlist(String code, String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.getpatientbypagerlist").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id).set("code", code));

	}

	@Override
	public Integer getylnmb(String queue_type_id, int ylh) {
		String sql = Blade.dao().getScript("PatientQueue.getylnmb").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id).set("ylh", ylh))
				.getInt("register_id");
	}

	@Override
	public Record findmaxregisterid(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.findmaxregisterid").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record findmaxregisterid2(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.findmaxregisterid2").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record findpagermaxregistreid(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.findpagermaxregistreid").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record findpagermaxregistreid2(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.findpagermaxregistreid").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public boolean ReferralQueueType(String queue_type_id, String ids, String register_id, String doctor_id) {
		return blade.updateBy(
				" register_id = #{register_id},opr_time='" + oprtime
						+ "',queue_type_id =#{queue_type_id},doctor_id=#{doctor_id}",
				"  id in(" + ids + ")", Record.create().set("register_id", register_id)
						.set("queue_type_id", queue_type_id).set("doctor_id", doctor_id));
	}

	@Override
	public boolean ReferralQueueType2(String queue_type_id, String ids, String register_id) {
		return blade.updateBy(
				" register_id = #{register_id},opr_time='" + oprtime
						+ "',queue_type_id =#{queue_type_id},doctor_id=#{doctor_id}",
				"  id in(" + ids + ")",
				Record.create().set("register_id", register_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> GetPatientByCodeTypeID(String queue_type_id, String code) {
		String sql = Blade.dao().getScript("PatientQueue.getPatientByCodeTypeID").getSql();
		return Db.init().selectList(sql, Record.create().set("queue_type_id", queue_type_id).set("code", code));
	}

	@Override
	public boolean ReferralQueueType3(String queue_type_id, String ids, String register_id, String doctor_id) {
		return blade.updateBy(
				" register_id = #{register_id},is_display=2,opr_time='" + oprtime
						+ "',queue_type_id =#{queue_type_id},doctor_id=#{doctor_id}",
				"  id in(" + ids + ")", Record.create().set("register_id", register_id)
						.set("queue_type_id", queue_type_id).set("doctor_id", doctor_id));
	}

	@Override
	public boolean ReferralQueueType4(String queue_type_id, String ids, String register_id) {
		return blade.updateBy(
				" register_id = #{register_id},is_display=2,opr_time='" + oprtime
						+ "',queue_type_id =#{queue_type_id},doctor_id=#{doctor_id}",
				"  id in(" + ids + ")",
				Record.create().set("register_id", register_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public boolean examinationdoctor(String doctor_id, String ids, String queue_type_id) {
		return blade.updateBy("doctor_id=#{doctor_id},queue_type_id=#{queue_type_id}", "id in (" + ids + ")",
				Record.create().set("doctor_id", doctor_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public boolean examinationpager(String pager_id, String ids, String queue_type_id) {
		return blade.updateBy("pager_id=#{pager_id},queue_type_id=#{queue_type_id}", "id in (" + ids + ")",
				Record.create().set("pager_id", pager_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public boolean noexamination(String ids, String type) {
		boolean bool = false;
		if ("1".equals(type)) {
			bool = blade.updateBy("doctor_id=null", "id in (" + ids + ")", null);
		} else if ("2".equals(type)) {
			bool = blade.updateBy("pager_id=null", "id in (" + ids + ")", null);
		}
		return bool;
	}

	@Override
	public List<Record> finddoctorid(String queue_type_id, String type) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.doctorid").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.pagerid").getSql();
		}
		return Db.init().selectList(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_doctor(String login_id, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_doctor").getSql();

		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_doctor_nodisplay(String login_id, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_doctor_nodisplay").getSql();

		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_pager(String ip, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_queuetype").getSql();

		return Db.init().selectList(sql, Record.create().set("ip", ip).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_pager2(String ip, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_queuetype2").getSql();

		return Db.init().selectList(sql, Record.create().set("ip", ip).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_doctor_locked(String login_id, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_doctor_locked").getSql();

		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_pager2_locked(String ip, int queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.list_call_patient_queuetype2_locked").getSql();

		return Db.init().selectList(sql, Record.create().set("ip", ip).set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> list_call_patient_pass(int queue_type_id, String pager_ip, String type, String login_id) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_pass").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_pass").getSql();
		}
		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id)
				.set("pager_ip", pager_ip));
	}

	@Override
	public List<Record> list_call_patient_was(int queue_type_id, String pager_ip, String type, String login_id) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_was").getSql();
			return Db.init().selectList(sql, Record.create().set("login_id", login_id)
					.set("queue_type_id", queue_type_id).set("pager_ip", pager_ip));
		} else {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_was").getSql();
			return Db.init().selectList(sql,
					Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
		}

	}

	@Override
	public List<Record> list_call_patient_over(int queue_type_id, String pager_ip, String type, String login_id,
			int doctor_id) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_over").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_over").getSql();
		}
		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id)
				.set("pager_ip", pager_ip).set("doctor_id", doctor_id));
	}

	@Override
	public List<Record> list_call_patient_agin(int queue_type_id, String pager_ip, String type, String login_id,
			int doctor_id) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_agin").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_agin").getSql();
		}
		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id)
				.set("pager_ip", pager_ip).set("doctor_id", doctor_id));
	}

	@Override
	public List<Record> list_call_patient_late(int queue_type_id, String pager_ip, String type, String login_id) {
		String sql = "";

		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_late").getSql();
			return Db.init().selectList(sql, Record.create().set("login_id", login_id)
					.set("queue_type_id", queue_type_id).set("pager_ip", pager_ip));
		} else {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_late").getSql();
			return Db.init().selectList(sql,
					Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
		}
	}

	@Override
	public List<Record> list_call_patient_first(int queue_type_id, String pager_ip, String type, String login_id) {
		String sql = "";

		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.list_patient_doctor_first").getSql();
			return Db.init().selectList(sql, Record.create().set("login_id", login_id)
					.set("queue_type_id", queue_type_id).set("pager_ip", pager_ip));
		} else {
			sql += Blade.dao().getScript("PatientQueue.list_patient_pager_first").getSql();
			return Db.init().selectList(sql,
					Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id));
		}
	}

	@Override
	public Record selectTriageRule(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.selectTriageRule").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record selectQueueTime(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.selectQueueTime").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public int updatequeuetime(String queue_type_id, int time_was, int time_agin, int f_was, int f_agin, int time_late,
			int f_late) {
		String sql = Blade.dao().getScript("PatientQueue.updatequeuetime").getSql();
		return Db.init().update(sql,
				Record.create().set("queue_type_id", queue_type_id).set("time_was", time_was)
						.set("time_agin", time_agin).set("f_was", f_was).set("f_agin", f_agin)
						.set("time_late", time_late).set("f_late", f_late));
	}

	@Override
	public int updatepagertime(String ip, int f_was, int f_agin, int f_late, int f_first) {
		String sql = Blade.dao().getScript("PatientQueue.updatepagertime").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip).set("f_was", f_was).set("f_agin", f_agin)
				.set("f_first", f_first).set("f_late", f_late));
	}

	@Override
	public Record call_next_doctor(String queue_type_id, String pager_ip, String login_id, int doctor_id) {
		String sql = Blade.dao().getScript("PatientQueue.call_patient_doctor_callnext").getSql();
		return Db.init().selectOne(sql, Record.create().set("login_id", login_id).set("queue_type_id", queue_type_id)
				.set("pager_ip", pager_ip).set("doctor_id", doctor_id));
	}

	@Override
	public Record call_next_pager(String queue_type_id, String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.call_patient_pager_callnext").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id).set("pager_ip", pager_ip)
				.set("login_id", login_id));
	}

	@Override
	public boolean update_patient_state(String pager_ip, String login_id, int id, int doctor_id) {
		// return
		// blade.updateBy("state_patient='51',content='"+pager_ip+"',caller='"+pager_ip+"',caller='\"+pager_ip+\"',callerip='"+pager_ip+"',caller2='"+pager_ip+"',caller3='"+pager_ip+"',caller4='"+pager_ip+"',doctor_id=#{doctor_id}",
		// "id=#{id}",Record.create().set("doctor_id", doctor_id).set("id", id));
		return blade.updateBy(
				"state_patient='51',content='2',caller='2',callerip='" + pager_ip + "',caller2='" + pager_ip
						+ "',caller3='" + pager_ip + "',caller4='" + pager_ip
						+ "',doctor_id=#{doctor_id},start_time=NOW(),call_time=NOW()",
				"id=#{id}", Record.create().set("doctor_id", doctor_id).set("id", id));
	}

	@Override
	public int callupdatestatusbypager(String pager_ip, String code, String status, String call, String content) {
		if (status.equals("54")) {
			int max = 0;
			String maxsql = Blade.dao().getScript("PatientQueue.getmaxregisterbypager").getSql();
			String maxs = Db.init().selectOne(maxsql, Record.create().set("ip", pager_ip).set("state2", 54))
					.getStr("maxregister");
			if (maxs == null || maxs.equals(""))
				max = 1;
			else
				max = Integer.parseInt(maxs) + 1;
			String sql = Blade.dao().getScript("PatientQueue.callupdatestatusbypager2").getSql();
			return Db.init().update(sql,
					Record.create().set("ip", pager_ip).set("pager_ip", pager_ip).set("source_code", code)
							.set("status", status).set("call", call).set("content", content).set("state_patient2", 54)
							.set("register_id2", max));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.callupdatestatusbypager").getSql();
			return Db.init().update(sql, Record.create().set("ip", pager_ip).set("pager_ip", pager_ip)
					.set("source_code", code).set("status", status).set("call", call).set("content", content));
		}
	}

	@Override
	public Record recall(int patient_queue_id, String pager_ip, String login_id, String type) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.recall_doctor").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.recall_pager").getSql();
		}
		return Db.init().selectOne(sql, Record.create().set("login_id", login_id).set("pager_ip", pager_ip)
				.set("patient_queue_id", patient_queue_id));
	}

	@Override
	public int SetPatientState(int patient_queue_id, String pager_ip, String login_id, int state, String type,
			int queue_type_id) {
		String sql = "";
		int max = 0;
		int state2 = 0;
		if ("1".equals(type)) {
			if (1 == state) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_doctor_1").getSql();
			} else if (state == 0) {
				state2 = 54;
				String maxsql = Blade.dao().getScript("PatientQueue.getMaxRegister2").getSql();
				String maxs = Db.init()
						.selectOne(maxsql, Record.create().set("queue_type_id", queue_type_id).set("state2", state2))
						.getStr("maxregister");
				if (maxs == null || maxs.equals(""))
					max = 1;
				else
					max = Integer.parseInt(maxs) + 1;
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_doctor_0").getSql();
			} else if (state == 2) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_doctor_2").getSql();
			} else if (state == 3) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_doctor_3").getSql();
			}
		} else if ("2".equals(type)) {
			if (1 == state) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_pager_1").getSql();
			} else if (state == 0) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_pager_0").getSql();
			} else if (state == 2) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_pager_2").getSql();
			} else if (state == 3) {
				sql += Blade.dao().getScript("PatientQueue.SetPatientState_pager_3").getSql();
			}
		}
		return Db.init().update(sql,
				Record.create().set("patient_queue_id", patient_queue_id).set("pager_ip", pager_ip)
						.set("login_id", login_id).set("opr_time", oprtime).set("state_patient2", state2)
						.set("register_id2", max));
	}

	// 获取当前就诊患者列表（多个）
	@Override
	public List<Record> select_state_patient(String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.select_state_patient_doctor").getSql();
		return Db.init().selectList(sql, Record.create().set("pager_ip", pager_ip).set("login_id", login_id));
	}

	@Override
	public Record select_state_patient(String pager_ip, String login_id, String type) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.select_state_patient_doctor").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.select_state_patient_pager").getSql();
		}
		return Db.init().selectOne(sql, Record.create().set("pager_ip", pager_ip).set("login_id", login_id));
	}

	// 当前就诊人
	@Override
	public Record list_patient_visit(String queue_type_id) {
		return blade.findOneColBy("id,register_id,patient_name,call_time,register_id2,state_patient2",
				"queue_type_id=#{queue_type_id} and state_patient=51 and is_display=2 and is_deleted=0",
				Record.create().set("queue_type_id", queue_type_id));
	}

	// 大屏等候人10人
	@Override
	public List<PatientQueue> querydgtop10(String queue_type_id) {
		return blade.findBy("patient_name,register_id,id",
				"queue_type_id = #{queue_type_id} AND state_patient NOT IN (1, 51, 52, 53, 54) AND is_display = 2 and is_deleted=0 ORDER BY register_id + '' ASC LIMIT 10",
				Record.create().set("queue_type_id", queue_type_id));
	}

	// 大屏患者
	@Override
	public List<Record> list_patient_call(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_patient_call").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> list_patient_call2(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_patient_call2").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> list_patient_call_pager(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_patient_call_pager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	// 修改content值为0
	@Override
	public boolean updatecontent(String id) {
		return blade.updateBy("content='0'", "id=#{id}", Record.create().set("id", id));
	}

	@Override
	public Integer updatecontent2(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.updatecontent2").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip));
	}

	// 根据医生id查询患者列表
	@Override
	public List<Record> list_room_door(String doctor_id) {
		return blade.findBy("id,register_id,patient_name",
				"state_patient NOT IN (1, 51, 52, 53, 54) AND doctor_id = #{doctor_id} AND is_display = 2 and is_deleted=0",
				Record.create().set("doctor_id", doctor_id));
	}

	@Override
	public Record list_doctor_room_door_jz(String doctor_id, String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_doctor_room_door_jz").getSql();
		return Db.init().selectOne(sql, Record.create().set("doctor_id", doctor_id).set("ip", ip));
	}

	@Override
	public Record list_pager_room_door_jz(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_pager_room_door_jz").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> listnextshowpager(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.listnextshowpager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> listnextshowdoctor(String ip, String doctor_id) {
		String sql = Blade.dao().getScript("PatientQueue.listnextshowdoctor").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip).set("doctor_id", doctor_id));
	}

	@Override
	public int updatecall(String doctor_id) {
		String sql = Blade.dao().getScript("PatientQueue.updatecall").getSql();
		return Db.init().update(sql, Record.create().set("doctor_id", doctor_id));
	}

	@Override
	public int updatecall2(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.updatecall2").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip));
	}

	@Override
	public int updatenextshow(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.updatenextshow").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> list_content_patient(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.list_content_patient").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public boolean update_istype() {
		return blade.updateBy("istype='0'", "state_patient=51", null);
	}

	@Override
	public int update_content(int queue_type_id, int id, String ip) {
		String sql = Blade.dao().getScript("PatientQueue.update_content").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip));
	}

	@Override
	public Record select_patient_queue_id(String pager_ip, String login_id, String type) {
		String sql = "";
		if ("1".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.select_patient_doctor_queue_id").getSql();
		} else if ("2".equals(type)) {
			sql += Blade.dao().getScript("PatientQueue.select_patient_pager_queue_id").getSql();
		}
		try {
			return Db.init().selectOne(sql, Record.create().set("pager_ip", pager_ip).set("login_id", login_id));
		} catch (Exception e) {
			return null;
		}

	}

	// 选呼
	@Override
	public Record call_select(String patient_queue_id, String queue_type_id, String pager_ip, String login_id,
			String type) {
		String sql = "";
		if ("1".equals(type)) {
			sql = Blade.dao().getScript("PatientQueue.call_select_doctor").getSql();
			return Db.init().selectOne(sql, Record.create().set("patient_queue_id", patient_queue_id)
					.set("queue_type_id", queue_type_id).set("pager_ip", pager_ip).set("login_id", login_id));
		} else {
			sql = Blade.dao().getScript("PatientQueue.call_select_pager").getSql();
			return Db.init().selectOne(sql, Record.create().set("patient_queue_id", patient_queue_id)
					.set("queue_type_id", queue_type_id).set("pager_ip", pager_ip).set("login_id", login_id));
		}

	}

	// //查询患者最大序号
	@Override
	public List<Record> maxregisterid(String queue_type_id) {
		return blade.findBy(" MAX(register_id) as register_id ",
				"queue_type_id=" + queue_type_id + " and register_id REGEXP '[^ -~]' !=1", null);
	}

	@Override
	public PatientQueue findByPatient_id(String patient_id) {
		return blade.findFirstBy("patient_id=#{patient_id}", Record.create().set("patient_id", patient_id));
	}

	@Override
	public Record count_patient_doctor(String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.count_patient_doctor").getSql();
		return Db.init().selectOne(sql, Record.create().set("login_id", login_id).set("ip", pager_ip));
	}

	@Override
	public Record count_patient_pager(String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.count_patient_pager").getSql();
		return Db.init().selectOne(sql, Record.create().set("login_id", login_id).set("ip", pager_ip));
	}

	@Override
	public Record GetStatistic(String queue_type_id, String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.GetStatistic").getSql();
		return Db.init().selectOne(sql,
				Record.create().set("queue_type_id", queue_type_id).set("login_id", login_id).set("ip", pager_ip));
	}

	@Override
	public List<Record> GetPatientList(String Queue_type_source_id, String pager_ip, String login_id) {
		String sql = Blade.dao().getScript("PatientQueue.GetPatientList").getSql();
		return Db.init().selectList(sql, Record.create().set("Queue_type_source_id", Queue_type_source_id)
				.set("pager_ip", pager_ip).set("login_id", login_id));
	}

	@Override
	public int deletepatient() {
		String sql = Blade.dao().getScript("PatientQueue.deletepatient").getSql();
		return Db.init().delete(sql, null);
	}

	@Override
	public Record checktab(String tabname) {
		String sql = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='medicaltriagesystem' AND TABLE_NAME='"
				+ tabname + "'";
		return Db.init().selectOne(sql);
	}

	@Override
	public int creattab(String tabname) {
		String sql = "CREATE TABLE " + tabname
				+ " (`id` int(11) NOT NULL AUTO_INCREMENT,`login_id` varchar(50) DEFAULT NULL,`doctor_name` varchar(100) DEFAULT NULL,`queue_type_id` varchar(100) DEFAULT NULL,`queue_type_name` varchar(100) DEFAULT NULL,`pager_name` varchar(255) DEFAULT NULL,`pager_ip` varchar(20) DEFAULT NULL,`databasename` varchar(100) DEFAULT NULL,`dbType` varchar(10) DEFAULT NULL,`patient_id` varchar(100) DEFAULT NULL,`patient_name` varchar(255) DEFAULT NULL,`call_time` datetime DEFAULT NULL,`start_time` datetime DEFAULT NULL,`fre_date` datetime DEFAULT NULL,`state_patient` int(11) DEFAULT NULL,`patient_source_code` varchar(255) DEFAULT NULL,`is_deleted` int(11) DEFAULT NULL,`is_display` int(11) DEFAULT NULL,PRIMARY KEY (`id`)) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARSET = utf8";
		return Db.init().update(sql, null);
	}

	@Override
	public int syncPatientData(String tabname) {
		String sql = "INSERT INTO " + tabname
				+ " (login_id, doctor_name, queue_type_id, queue_type_name, pager_name, pager_ip, databasename, dbType, patient_id, patient_name, call_time, start_time, fre_date, state_patient, patient_source_code, is_deleted, is_display)SELECT b.login_id, b.`NAME` AS doctor_name, c.source_id AS queue_type_id, c.`NAME` AS queue_type_name, d.`NAME` AS pager_name, d.ip AS pager_ip, f.description AS databasename, f.dbType, a.patient_id, a.patient_name, a.call_time, a.start_time, a.fre_date, a.state_patient, a.patient_source_code, a.is_deleted, a.is_display FROM patient_queue a LEFT JOIN doctor b ON a.doctor_id = b.doctor_id LEFT JOIN queue_type c ON a.queue_type_id = c.queue_type_id LEFT JOIN pager d ON a.callerip = d.ip LEFT JOIN triage e ON c.triage_id = e.triage_id LEFT JOIN data_connection f ON a.db_source_id = f.id";
		return Db.init().insert(sql, null);
	}

	@Override
	public int deletepatientbyqueuetypeid(String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.deletepatientbyqueuetypeid").getSql();
		return Db.init().delete(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public List<Record> querytable() {
		return blade.findAll();
	}

	@Override
	public List<Record> selectPatientDisplay(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.autosetpatientdisplay").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public int updatesetpatientdisplay(String ip, String sort, String code) {
		String sql = Blade.dao().getScript("PatientQueue.updateautosetpatientdisplay").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip).set("r_id", sort).set("source_code", code));
	}

	@Override
	public Record selectlestpatientqueue(String source_code) {
		String sql = Blade.dao().getScript("PatientQueue.selectlestpatientqueue").getSql();
		return Db.init().selectOne(sql, Record.create().set("source_code", source_code));
	}

	@Override
	public Record getqueuemaxregisterid(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.getqueuemaxregisterid").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> vistinglocaltion(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.vistinglocaltion").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> selectpatientdoctor(String ip, String status) {
		if (status == "0,3,4,6,7,50" || status == "8") {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientdoctor").getSql();
			return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientdoctorbyoprtime").getSql();
			return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
		}

	}

	@Override
	public List<Record> checkpagercalling(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.checkpagercalling").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> selectpatientpager(String ip, String status) {
		if (status == "0,3,4,6,7,50" || status == "8") {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpager").getSql();
			return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerbyoprtime").getSql();
			return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
		}
	}

	@Override
	public List<Record> selectpatientpager_locked(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerbyoprtimelocked").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> selectpatientpagerbypager(String ip, String status) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientpagerbypager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
	}

	@Override
	public List<Record> selectpatientpagerId(String id, String status) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId").getSql();
		return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)).set("status", status));
	}
	@Override
	public List<Record> selectpatientpagerId_lock(String id)
	{
		String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId_lock").getSql();
		return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)));
	}
	
	@Override
	public List<Record> selectpatientpagerId_nodisplay(String id) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientpagerId_nodisplay").getSql();
		return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)));
	}

	@Override
	public List<Record> selectpatientpagerId2(String id, String status) {
		if (status == "0,3,4,5,6,7" || status == "8") {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId2").getSql();
			return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)).set("status", status));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId2first").getSql();
			return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)).set("status", status));
		}
	}

	@Override
	public List<Record> selectpatientpagerId2_locked(String id) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId2locked").getSql();
		return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)));
	}

	@Override
	public List<Record> selectpatientpagerId3(String id, String status) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientwaitpagerId3").getSql();
		return Db.init().selectList(sql, Record.create().set("id", Integer.parseInt(id)).set("status", status));
	}

	@Override
	public List<Record> selectpatientteminal(String ip, String status) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientteminal").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
	}

	@Override
	public List<Record> selectpatientcallingpager(String ip, String status) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientcallingpager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip).set("status", status));
	}

	@Override
	public Record selectpatientbycode(String ip, String code) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientbycode").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip).set("code", code));
	}

	@Override
	public int updatepatientpagercallerstatus(String key, String code, String ip) {
		if (key.equals("caller")) {
			String sql = Blade.dao().getScript("PatientQueue.updatepatientpagercallerstatus").getSql();
			return Db.init().update(sql, Record.create().set("code", code).set("ip", ip));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.updatepatientpagercontentstatus").getSql();
			return Db.init().update(sql, Record.create().set("code", code).set("ip", ip));
		}
	}

	@Override
	public int updatepatientGHbyDoorscan(String code, String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.updatepatientGHbyDoorscan").getSql();
		return Db.init().update(sql, Record.create().set("code", code).set("queue_type_id", queue_type_id));
	}

	@Override
	public Record selectpatientbycodeandip(String pager_ip, String code) {
		String sql = Blade.dao().getScript("PatientQueue.selectpatientbycodeandip").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", pager_ip).set("code", code));
	}

	@Override
	public Record selectqueuetypeidbydoctor(int doctor_id) {
		String sql = Blade.dao().getScript("PatientQueue.selectqueuetypeidbydoctor").getSql();
		return Db.init().selectOne(sql, Record.create().set("doctor_id", doctor_id));
	}

	@Override
	public Record selectTQrule(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.selectTQrule").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public Record selectTQrule2(String ip) {
		String sql = Blade.dao().getScript("PatientQueue.selectTQrule2").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public Record selectTQrule4(String id) {
		String sql = Blade.dao().getScript("PatientQueue.selectTQrule4").getSql();
		return Db.init().selectOne(sql, Record.create().set("id", id));
	}

	@Override
	public Record selectTQrule3(String queue_type_id, String type) {
		String sql = "";
		if (type.equals("1"))
			sql = Blade.dao().getScript("PatientQueue.selectTQrule3_1").getSql();
		else
			sql = Blade.dao().getScript("PatientQueue.selectTQrule3_2").getSql();
		return Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Record selectPatientBySourceCode(String queue_type_id, String source_code) {
		if (!StringKit.isBlank(queue_type_id)) {
			String sql = Blade.dao().getScript("PatientQueue.selectPatientBySourceCode").getSql();
			return Db.init().selectOne(sql,
					Record.create().set("queue_type_id", queue_type_id).set("source_code", source_code));
		} else {
			String sql = Blade.dao().getScript("PatientQueue.selectPatientBySourceCode2").getSql();
			return Db.init().selectOne(sql, Record.create().set("source_code", source_code));
		}
	}

	@Override
	public int updateQuhaoIsdisplay(String id) {
		String sql = Blade.dao().getScript("PatientQueue.updateQuhaoIsdisplay").getSql();
		return Db.init().update(sql, Record.create().set("patient_id", id));
	}

	@Override
	public Record selectPatientbycode(String code, String queue_type_id) {
		String sql = Blade.dao().getScript("PatientQueue.selectPatientbycodequeueid").getSql();
		return Db.init().selectOne(sql, Record.create().set("code", code).set("queue_type_id", queue_type_id));
	}

	@Override
	public Record selectPatientbyPagerIDAndCode(String queue_type_id, String code) {
		String sql = Blade.dao().getScript("PatientQueue.selectPatientbyPagerIDAndCode").getSql();
		return Db.init().selectOne(sql, Record.create().set("code", code).set("id", queue_type_id));
	}

	@Override
	public int updatePatientbyPagerIDandCode(String id, String code, int state, String opr_time) {
		int max = 0;
		String maxsql = Blade.dao().getScript("PatientQueue.getmaxregisterbypagerid").getSql();
		String maxs = Db.init().selectOne(maxsql, Record.create().set("id", id).set("state2", 2)).getStr("maxregister");
		if (maxs == null || maxs.equals(""))
			max = 1;
		else
			max = Integer.parseInt(maxs) + 1;

		String sql = Blade.dao().getScript("PatientQueue.updatePatientbyPagerIDandCode").getSql();
		return Db.init().update(sql, Record.create().set("id", id).set("code", code).set("state", state)
				.set("opr_time", opr_time).set("state_patient2", 54).set("register_id2", max));
	}

	@Override
	public int updatePatientLateLock(String code, String queue_type_id, String time) {
		String sql = Blade.dao().getScript("PatientQueue.updatePatientLateLock").getSql();
		return Db.init().update(sql,
				Record.create().set("code", code).set("queue_type_id", queue_type_id).set("time", time));
	}

	@Override
	public List<Record> selectIsBegin(String type, String id) {
		String sql = "";
		if (type.equals("1"))
		{
			sql = Blade.dao().getScript("PatientQueue.selectIsBegin_queue").getSql();
		}
		else
		{
			sql = Blade.dao().getScript("PatientQueue.selectIsBegin_pager").getSql();
		}
		return Db.init().selectList(sql, Record.create().set("id", id));
	}

	@Override
	public List<Record> selectPassByTer(String type, String ip) {
		String sql = "";
		if (type.equals("1"))
			sql = Blade.dao().getScript("PatientQueue.selectPassByTerForDoctor").getSql();
		else
			sql = Blade.dao().getScript("PatientQueue.selectPassByTerForPager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public int getReserveMaxNmb(String queue_type_id, String date) {
		String sql = Blade.dao().getScript("PatientQueue.getReserveMaxNmb").getSql();
		String vString = Db.init().selectOne(sql, Record.create().set("queue_type_id", queue_type_id).set("date", date))
				.getStr("max_id");
		if (vString.equals("") || vString == null)
			return 1;
		else {
			return Integer.parseInt(vString) + 1;
		}
	}

	@Override
	public boolean InsertReserve(String queue_type_id, String patient_id, String patient_name,
			String patient_source_code, String reserve_id, String reserve_time, String begin_time, String end_time) {
		String sql = Blade.dao().getScript("PatientQueue.insertReserve").getSql();
		int r = Db.init().insert(sql,
				Record.create().set("queue_type_id", queue_type_id).set("patient_id", patient_id)
						.set("patient_name", patient_name).set("patient_source_code", patient_source_code)
						.set("reserve_id", reserve_id).set("reserve_time", reserve_time).set("begin_time", begin_time).set("end_time", end_time));
		if (r > 0)
			return true;
		else {
			return false;
		}
	}
	@Override
	public int copyReservePatient()
	{
		String sql = Blade.dao().getScript("PatientQueue.copyReservePatient").getSql();
		return Db.init().insert(sql,null);
	}

	@Override
	public int insertPatient(Record map) {
		String sql = Blade.dao().getScript("PatientQueue.INSERT_PATIENT_SINGNTIME").getSql();
		return Db.init().insert(sql,map);
	}
}
