package com.shine.service.impl;

import java.util.List;

import com.core.base.service.impl.BaseService;
import com.core.dao.Blade;
import com.core.dao.Db;
import com.core.toolbox.Record;
import com.shine.model.QueueType;
import com.shine.model.Triage;
import com.shine.service.QueueTypeService;

/**
 * Generated by Blade. 2017-08-03 10:50:24
 */
public class QueueTypeServiceImpl extends BaseService<QueueType> implements QueueTypeService {

	Blade blade = Blade.create(QueueType.class);

	// \u67E5\u8BE2\u6240\u6709\u5206\u8BCA\u53F0\u7684\u540D\u79F0
	@Override
	public List<Record> queryTriageName() {
		return Blade.create(Triage.class).findBy("triage_id,name", " where 1=1", Triage.class);
	}

	@Override
	public QueueType queryQueueTypeName(String queueTypeName) {
		return blade.findFirstBy("name=#{name}", Record.create().set("name", queueTypeName));
	}

	@Override
	public QueueType findBySource_id(String source_id) {
		return blade.findFirstBy("source_id=#{source_id}", Record.create().set("source_id", source_id));
	}
	//获取分诊台队列列表
	@Override
	public List<Record> listQueueType(String ip) {
		String bsql = Blade.dao().getScript("QueueType.listQueueType").getSql();
		return Db.init().selectList(bsql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> listQueueType2(String ip,String type) {
		if(type.equals("1"))
		{
			String bsql = Blade.dao().getScript("QueueType.listQueueType2").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
		}
		else
		{
			String bsql = Blade.dao().getScript("QueueType.listQueueType3").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
		}
	}
	//获取分诊台叫号器列表
	@Override
	public List<Record> listPager(String ip){
		String bsql = Blade.dao().getScript("QueueType.listPager").getSql();
		return Db.init().selectList(bsql, Record.create().set("ip", ip));
	}
	public List<Record> listPager2(String ip,String type){
			String bsql = Blade.dao().getScript("QueueType.listPager2").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
	}
	//获取分诊台已登录叫号器列表
		@Override
		public List<Record> listPagerLogin(String ip){
			String bsql = Blade.dao().getScript("QueueType.listPagerLogin").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
		}
		@Override
		public List<Record> listPagerLogin2(String ip){
			String bsql = Blade.dao().getScript("QueueType.listPagerLogin2").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
		}
		@Override
		public List<Record> listPagerLogin2_all(String ip){
			String bsql = Blade.dao().getScript("QueueType.listPagerLogin2_all").getSql();
			return Db.init().selectList(bsql, Record.create().set("ip", ip));
		}
	@Override
	public String FristPagerType(String id)
	{
		String sql = Blade.dao().getScript("QueueType.FristPagerType").getSql();
		return Db.init().selectOne(sql, Record.create().set("id", id)).getStr("queue_type_id");
	}
	
	@Override
	public List<Record> listQueueTypeName(String ip) {
		String bsql = Blade.dao().getScript("QueueType.listQueueTypeName").getSql();
		return Db.init().selectList(bsql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> list_queue_type_wait_call(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type_wait_call").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> list_queue_type_wait_call_pager(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type_wait_call_pager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> listPagerLogin2_pager(String ip) {
		String sql = Blade.dao().getScript("QueueType.listPagerLogin2_pager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	
	@Override
	public List<Record> list_queue_type(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> list_queue_type_all(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type_all").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> list_queue_type_pager_all(String ip){
		String sql = Blade.dao().getScript("QueueType.list_queue_type_pager_all").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	@Override
	public List<Record> list_queue_type_pager(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type_pager").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}
	
	@Override
	public List<Record> list_queue_type_pager_jz(String ip) {
		String sql = Blade.dao().getScript("QueueType.list_queue_type_pager_jz").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> list_doctor_queuetype(String login_id) {
		String sql = Blade.dao().getScript("QueueType.list_doctor_queuetype").getSql();
		return Db.init().selectList(sql, Record.create().set("login_id", login_id));
	}

	@Override
	public List<Record> list_pager_queuetype(String login_id, String ip) {
		String sql = Blade.dao().getScript("QueueType.list_pager_queuetype").getSql();
		return Db.init().selectList(sql, Record.create().set("login_id", login_id).set("ip", ip));
	}

	@Override
	public List<Record> findByQueueId(String queue_type_id) {
		// return blade.findFirstBy("queue_type_id=#{queue_type_id}",
		// Record.create().set("queue_type_id", queue_type_id));
		String sql = Blade.dao().getScript("QueueType.getQueueTypeById").getSql();
		return Db.init().selectList(sql, Record.create().set("queue_type_id", queue_type_id));
	}

	@Override
	public Integer showloginupdate(String ip, String doctor_id) {
		String sql = Blade.dao().getScript("QueueType.showloginupdate").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip).set("doctor_id", doctor_id));
	}

	@Override
	public Integer showloginupdateout(String ip) {
		String sql = Blade.dao().getScript("QueueType.showloginupdateout").getSql();
		return Db.init().update(sql, Record.create().set("ip", ip));
	}

	@Override
	public Integer showcallupdate(String doctor_id, String source_id, String show_visiting, String show_wait,
			String show_visiting_nmb) {
		String sql = Blade.dao().getScript("QueueType.showcallupdate").getSql();
		return Db.init().update(sql, Record.create().set("source_id", source_id).set("show_visiting", show_visiting)
				.set("show_wait", show_wait).set("doctor_id", doctor_id).set("show_visiting_nmb", show_visiting_nmb));
	}

	@Override
	public Record show_login(String ip) {
		String sql = Blade.dao().getScript("QueueType.show_login").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public Record show_call_door(String ip) {
		String sql = Blade.dao().getScript("QueueType.show_call_door").getSql();
		return Db.init().selectOne(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> show_call_hall(String ip) {
		String sql = Blade.dao().getScript("QueueType.show_call_hall").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public List<Record> show_call_hall_type(String ip) {
		String sql = Blade.dao().getScript("QueueType.show_call_hall_type").getSql();
		return Db.init().selectList(sql, Record.create().set("ip", ip));
	}

	@Override
	public Integer showupdaecalled_door(String id) {
		String sql = Blade.dao().getScript("QueueType.showupdaecalled_door").getSql();
		return Db.init().update(sql, Record.create().set("id", id));
	}

	@Override
	public Integer showupdaecalled_hall(String ids) {
		String sql = Blade.dao().getScript("QueueType.showupdaecalled_hall").getSql();
		return Db.init().update(sql, Record.create().set("ids", ids));
	}

	@Override
	public Integer showupdatequeuetype(String source_id, String name, String displayname) {

		String sql = Blade.dao().getScript("QueueType.showupdatequeuetype_select").getSql();
		Record record = Db.init().selectOne(sql, Record.create().set("source_id", source_id));
		if (record != null) {
			sql = Blade.dao().getScript("QueueType.showupdatequeuetype_update").getSql();
			return Db.init().update(sql,
					Record.create().set("source_id", source_id).set("name", name).set("displayname", displayname));
		} else {
			sql = Blade.dao().getScript("QueueType.showupdatequeuetype_insert").getSql();
			return Db.init().insert(sql,
					Record.create().set("source_id", source_id).set("name", name).set("displayname", displayname));
		}
	}

	@Override
	public Integer showupdatepager(String ip, String name, String displayname) {

		String sql = Blade.dao().getScript("QueueType.showupdatepager_select").getSql();
		Record record = Db.init().selectOne(sql, Record.create().set("ip", ip));
		if (record != null) {
			sql = Blade.dao().getScript("QueueType.showupdatepager_update").getSql();
			return Db.init().update(sql,
					Record.create().set("ip", ip).set("name", name).set("displayname", displayname));
		} else {
			sql = Blade.dao().getScript("QueueType.showupdatepager_insert").getSql();
			return Db.init().insert(sql,
					Record.create().set("ip", ip).set("name", name).set("displayname", displayname));
		}
	}

	@Override
	public Integer showupdateterminal(String ip, String name, String displayname) {

		String sql = Blade.dao().getScript("QueueType.showupdateterminal_select").getSql();
		Record record = Db.init().selectOne(sql, Record.create().set("ip", ip));
		if (record != null) {
			sql = Blade.dao().getScript("QueueType.showupdateterminal_update").getSql();
			return Db.init().update(sql,
					Record.create().set("ip", ip).set("name", name).set("displayname", displayname));
		} else {
			sql = Blade.dao().getScript("QueueType.showupdateterminal_insert").getSql();
			return Db.init().insert(sql,
					Record.create().set("ip", ip).set("name", name).set("displayname", displayname));
		}
	}

	@Override
	public Integer showupdatepager2queue_type(String pager_id, String queue_type_id) {
		String sql = Blade.dao().getScript("QueueType.showupdatepager2queue_type_select").getSql();
		Record record = Db.init().selectOne(sql, Record.create().set("pager_id", pager_id).set("queue_type_id", queue_type_id));
		if (record != null) {
			return -1;
		} else {
			sql = Blade.dao().getScript("QueueType.showupdatepager2queue_type_insert").getSql();
			return Db.init().insert(sql, Record.create().set("pager_id", pager_id).set("queue_type_id", queue_type_id));
		}
	}

	@Override
	public Integer showupdatepager2terminal(String pager_id, String id) {
		String sql = Blade.dao().getScript("QueueType.showupdatepager2terminal_select").getSql();
		Record record = Db.init().selectOne(sql, Record.create().set("pager_id", pager_id).set("id", id));
		if (record != null) {
			return -1;
		} else {
			sql = Blade.dao().getScript("QueueType.showupdatepager2terminal_insert").getSql();
			return Db.init().insert(sql, Record.create().set("pager_id", pager_id).set("id", id));
		}
	}
	@Override
	public Integer showupdatepager2queue_type_del(String pager_id, String queue_type_id)
	{
		String sql = Blade.dao().getScript("QueueType.showupdatepager2queue_type_del").getSql();
		return Db.init().delete(sql, Record.create().set("pager_id", pager_id).set("queue_type_id", queue_type_id));
	}
	
	@Override
	public Integer showupdatepager2terminal_del(String pager_id, String id)
	{
		String sql = Blade.dao().getScript("QueueType.showupdatepager2terminal_del").getSql();
		return Db.init().delete(sql, Record.create().set("pager_id", pager_id).set("id", id));
	}
	
	@Override
	public List<Record> showupdatepager2queue_type_list()
	{
		String sql = Blade.dao().getScript("QueueType.showupdatepager2queue_type_list").getSql();
		return Db.init().selectList(sql);
	}
	
	@Override
	public List<Record> showupdatepager2terminal_list()
	{
		String sql = Blade.dao().getScript("QueueType.showupdatepager2terminal_list").getSql();
		return Db.init().selectList(sql);
	}
	@Override 
	public Integer ResetCallStatus(String queue_type_id)
	{
		String sql = Blade.dao().getScript("QueueType.ResetCallStatus").getSql();
		return Db.init().update(sql,
				Record.create().set("queue_type_id", queue_type_id));
	}
	
}
