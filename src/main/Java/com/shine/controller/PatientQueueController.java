package com.shine.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.beetl.core.statement.VarAssignExpression;

import com.alibaba.druid.sql.visitor.functions.Now;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.common.config.MainConfig;
import com.core.jfinal.ext.kit.JsonKit;
import com.core.toolbox.Record;
import com.shine.model.Doctor;
import com.shine.model.PatientCode;
import com.shine.model.PatientQueue;
import com.shine.model.QueueType;
import com.shine.service.DoctorService;
import com.shine.service.PatientCodeService;
import com.shine.service.PatientQueueService;
import com.shine.service.QueueTypeService;
import com.shine.service.impl.DoctorServiceImpl;
import com.shine.service.impl.PatientCodeServiceImpl;
import com.shine.service.impl.PatientQueueServiceImpl;
import com.shine.service.impl.QueueTypeServiceImpl;
import com.system.controller.base.UrlPermissController;
import com.jfinal.kit.StrKit;

/**
 * Generated by Blade. 2017-08-03 10:50:24
 */
public class PatientQueueController extends UrlPermissController {
	private static String CODE = "patientQueue";
	private static String PERFIX = "patient_queue";
	private static String LIST_SOURCE = "PatientQueue.list";
	private static String BASE_PATH = "/platform/patientQueue/";

	PatientQueueService service = new PatientQueueServiceImpl();

	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "patientQueue.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "patientQueue_add.html");
	}

	public void edit() {
		String id = getPara(0);
		PatientQueue patientQueue = service.findById(id);
		setAttr("model", JsonKit.toJson(patientQueue));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "patientQueue_edit.html");
	}

	public void view() {
		String id = getPara(0);
		PatientQueue patientQueue = service.findById(id);
		setAttr("model", JsonKit.toJson(patientQueue));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "patientQueue_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		PatientQueue patientQueue = mapping(PERFIX, PatientQueue.class);
		boolean temp = service.save(patientQueue);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		PatientQueue patientQueue = mapping(PERFIX, PatientQueue.class);

		boolean temp = service.update(patientQueue);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}

	public void save_patient() {
		Map<String, Object> map = new HashMap<String, Object>();
		String patient_strs = getPara("patients");
		if (StrKit.isBlank(patient_strs)) {
			map.put("code", -1);
			map.put("msg", "请传值");
			renderJson(map);
			return;
		} else {
			JSONArray patientList = JSON.parseArray(patient_strs);
			if (patientList != null) {
				PatientQueue pq = null;
				for (Object json : patientList) {
					JSONObject patient_json = (JSONObject) json;
					pq = new PatientQueue();
					QueueTypeService qt = new QueueTypeServiceImpl();
					DoctorService ds = new DoctorServiceImpl();
					Doctor d = ds.findByLogin_id(patient_json.getString("doctor_source_id"));
					if (null != d) {
						pq.setDoctor_id(d.getDoctor_id());
					}
					pq.setPatient_id(patient_json.getString("patient_id"));
					pq.setPatient_name(patient_json.getString("patient_name"));
					pq.setQueue_type_source_id(patient_json.getString("queue_type_source_id"));
					QueueType queuetype = qt.findBySource_id(patient_json.getString("queue_type_source_id"));
					if (null == queuetype) {
						map.put("code", -1);
						map.put("msg", "队列编号不能为空,请确认是否有队列");
						renderJson(map);
						return;
					}
					int queue_type_id = queuetype.getQueue_type_id();
					pq.setQueue_type_id(queue_type_id);
					pq.setSub_queue_order(patient_json.getInteger("sub_queue_order"));
					pq.setSub_queue_type(patient_json.getString("sub_queue_type"));
					pq.setTime_interval(patient_json.getInteger("time_interval"));
					if ("1".equals(queuetype.getIs_checkin().toString())) {
						pq.setIs_display(1);
					} else if ("2".equals(queuetype.getIs_checkin().toString())) {
						pq.setIs_display(2);
					}
					if ("1".equals(queuetype.getIs_reorder().toString())) {
						int register_id = 0;
						for (int i = 0; i < patient_json.size(); i++) {
							List<Record> list = service.maxregisterid(String.valueOf(queue_type_id));
							if (null == list || list.size() == 0) {
								register_id = 1;
							} else {
								register_id = list.get(0).getInt("register_id");
							}
							pq.setRegister_id(String.valueOf(register_id));
							i++;
						}
					} else if ("2".equals(queuetype.getIs_reorder().toString())) {
						pq.setRegister_id(patient_json.getString("register_id"));
					} else {
						return;
					}
					pq.setQueue_num(patient_json.getString("queue_num"));
					pq.setIs_deleted(patient_json.getInteger("is_deleted"));
					pq.setFre_date(patient_json.getDate("fre_date"));
					pq.setOpr_time(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSSS").format(new Date()));
					pq.setState_patient(0);
					boolean bool = false;
					try {
						bool = service.save(pq);
					} catch (Exception e) {
						map.put("code", -1);
						map.put("msg", "保存失败,患者编号：" + patient_json.getString("patient_id") + "不是唯一值");
						renderJson(map);
						return;
					}
					if (bool) {
						map.put("code", 200);
						map.put("msg", "保存成功");
						renderJson(map);
						PatientCode pc = new PatientCode();
						pc.setCode(patient_json.getString("source_code"));
						PatientQueue qp = service.findByPatient_id(patient_json.getString("patient_id"));
						int patient_queue_id = qp.getId();
						pc.setPatient_queue_id(patient_queue_id);
						PatientCodeService pcser = new PatientCodeServiceImpl();
						pcser.save(pc);
					} else {
						map.put("code", -1);
						map.put("msg", "保存失败");
						renderJson(map);
						return;
					}
				}
			}
		}
		renderJson(map);
	}

	public void deletepatient() {
		String bakString=MainConfig.map.get("bak_database");
		try {
			if(bakString.equals("true")) {
				SimpleDateFormat df = new SimpleDateFormat("yyyy");//设置日期格式
		        String tabname="p"+df.format(new Date());
			    Record r=	service.checktab(tabname);
			    if(r==null)
			    {
			    	service.creattab(tabname);
			    }
			    try {
			    	service.syncPatientData(tabname);
				} catch (Exception e) {
					
				}
		    }
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		service.deletepatient();
	}
	public void copyReservePatient() {
		service.copyReservePatient();
	}
}
