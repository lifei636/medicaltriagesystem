package com.shine.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.core.dao.Blade;
import com.core.dao.Db;
import com.core.jfinal.ext.kit.JsonKit;
import com.core.toolbox.Record;
import com.core.toolbox.kit.ShardKit;
import com.ibm.icu.text.SimpleDateFormat;
import com.shine.model.Triage;
import com.shine.service.TriageService;
import com.shine.service.impl.TriageServiceImpl;
import com.system.controller.base.UrlPermissController;

/**
 * Generated by Blade. 2017-08-03 10:50:24
 */
public class TriageController extends UrlPermissController {
	private static String CODE = "triage";
	private static String PERFIX = "triage";
	private static String LIST_SOURCE = "Triage.list";
	private static String BASE_PATH = "/platform/triage/";
	ShardKit shardkit = new ShardKit();
	TriageService service = new TriageServiceImpl();

	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "triage.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "triage_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Triage triage = service.findById(id);

		setAttr("model", JsonKit.toJson(triage));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "triage_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Triage triage = service.findById(id);
		setAttr("model", JsonKit.toJson(triage));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "triage_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		Triage triage = mapping(PERFIX, Triage.class);
		// 如果表没数据，设置主键自增长字段从1重新开始
		if (null == service.queryAll() || service.queryAll().isEmpty()) {
			Blade.dao().executeUpdate("alter table triage auto_increment=1", Triage.class);
		}
		// 根据分诊台名称查询添加的分诊台名称是否有重复
		Triage tname = service.queryTriageName(triage.getName());
		if (null != tname && tname.getTriage_id() != null) {
			renderJson(error(TRIAGE_NAME_MSG));
			return;
		}
		// 查询分诊台ip
		Triage triage_ip = service.queryTriageIp(triage.getIp());
		if (null != triage_ip && triage_ip.getTriage_id() != null) {
			renderJson(error(TRIAGE_IP_MSG));
			return;
		}
		// 当前ip不合法
		if (shardkit.isIP(triage.getIp().toString()) == false) {
			renderJson(error(TRIAGE_IP_ERROR_MSG));
			return;
		}
		triage.setPager_type(0);
		triage.setCreate_time(new Date());
		//triage.setReorder_type(0);
		boolean temp = service.save(triage);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Triage triage = mapping(PERFIX, Triage.class);
		// 根据分诊台名称查询
		Triage triage_name = service.queryTriageName(triage.getName());
		if (null != triage_name && triage_name.getTriage_id().intValue() != triage.getTriage_id().intValue()) {
			renderJson(error(TRIAGE_NAME_MSG));
			return;
		}
		// 根据分诊台IP查询
		Triage triage_ip = service.queryTriageIp(triage.getIp());
		if (null != triage_ip && triage_ip.getTriage_id().intValue() != triage.getTriage_id().intValue()) {
			renderJson(error(TRIAGE_IP_MSG));
			return;
		}
		boolean temp = service.update(triage);
		if (temp) {
			//查询分诊台绑定的队列id
			/*String triageSql = Blade.dao().getScript("PatientQueue.LISTQUERYTYPE_ALL").getSql();
			List<Record> queueTypeIds = Db.init().selectList(triageSql, Record.create().set("triage_id", triage.getTriage_id()));
			String patientSql = Blade.dao().getScript("PatientQueue.LISTPATIENT_LOCK").getSql();
			for (Record record : queueTypeIds){
				List<Record> patient_locks = Db.init().selectList(patientSql, Record.create().set("queueTypeId", record.getInt("queue_type_id")));
				if (patient_locks != null && !patient_locks.isEmpty()){
					String updateSql = null;
					//实际锁定数超过限定数就修改超过的
					List<String> updateList = new ArrayList<>();
					SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS");
					String format = null;
					if (patient_locks.size() > triage.getFirst_flag_step()){
						updateSql = Blade.dao().getScript("PatientQueue.UPDATE_PATIENT_QUEUE_UNLOCK").getSql();
						for (int i=patient_locks.size()-1 ;i >= triage.getFirst_flag_step(); i--){
							format = simpleDateFormat.format(System.currentTimeMillis());
							Db.init().update(updateSql, Record.create().set("patient_id", patient_locks.get(i).getStr("patient_id")).set("newTime",format));
						}

					}else if (patient_locks.size() < triage.getFirst_flag_step()){
						updateSql = Blade.dao().getScript("PatientQueue.UPDATE_PATIENT_QUEUE_LOCK").getSql();
						String waitSql = Blade.dao().getScript("PatientQueue.FIND_WARIT_PARITE_ALL").getSql();
						List<Record> waitUnlocks = Db.init().selectList(waitSql, Record.create().set("queueTypeId", record.getInt("queue_type_id")));
						for (int i=0 ;i < triage.getFirst_flag_step()-patient_locks.size(); i++ ){
							format = simpleDateFormat.format(System.currentTimeMillis());
							Db.init().update(updateSql, Record.create().set("patient_id", waitUnlocks.get(i).getStr("patient_id")).set("newTime",format));
						}
					}
				}
			}*/
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}

	public void triageQueuetype() {
		setAttr("code", CODE);
		setAttr("aid", getPara(0));
		render(BASE_PATH + "triage_queuetype.html");
	}

}
